pipeline {
    agent { label 'agent1' }
    environment {
        ANSIBLE_HOST_KEY_CHECKING = 'False'
    }
    parameters {
        choice(
            name: 'ROLE',
            choices: ['all', 'filesystem', 'apache2', 'logrotate'],
            description: 'Which role to run'
        )
    }

    stages {
        stage("Checkout") {
            steps {
                git branch: 'main',
                    credentialsId: 'github',
                    url: 'https://github.com/badr-2001/jenkins_project.git'
            }
        }

        stage("Test") {
            steps {
                sh "echo 'it works the second time'"
            }
        }

        stage('InstallDependencies') {
            steps {
                echo '[INFO] Installing Terraform and Ansible...'
                sh '''
                  if ! command -v ansible >/dev/null 2>&1; then
                    echo "[INFO] Installing Ansible..."
                    sudo apt-get update -y
                    sudo apt-get install -y ansible
                    ansible --version
                  else
                    echo "[INFO] Ansible already installed: $(ansible --version | head -n1)"
                  fi
                '''
            }
        }

        stage('Run Ansible Playbook') {
            steps {
                script {
                    def extraArgs = (params.ROLE == "all") ? "" : "--tags ${params.ROLE}"
                    ansiblePlaybook(
                        playbook: 'main-playbook.yml',
                        inventory: 'inventory/hosts.ini',
                        credentialsId: 'ansible',
                        extras: extraArgs
                    )
                }
            }
        }

        stage('ValidateDeploy') {
            steps {
                sh '''
                  echo "[INFO] Validating Apache page..."
                  ansible front -i inventory/hosts.ini -m uri -a "url=http://{{ ansible_host }}/ return_content=yes" \
                    | grep "Hello World"
                '''
            }
        }
    }

    post {
        success {
            slackSend(channel: '#jenkins', color: 'good',
                message: "✅ Job *${env.JOB_NAME}* [${env.BUILD_NUMBER}] succeeded (<${env.BUILD_URL}|Open>)")
        }
        failure {
            slackSend(channel: '#jenkins', color: 'danger',
                message: "❌ Job *${env.JOB_NAME}* [${env.BUILD_NUMBER}] failed (<${env.BUILD_URL}|Open>)")
        }
    }
}
